package bean17.cha.java_1_8;

import java.util.Iterator;
import java.util.stream.StreamSupport;

/**
 * Even Fibonacci numbers
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * <p>
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 * @author bean17.cha@gmail.com
 */
public class Problem02 {
    private static final int MAX = 4000000;

    public static void main(String[] args) {
        FUtils.printLog(Problem02::sum);
    }

    private static long sum() {
        final Iterable<Integer> iterable = () -> new MaxFibonacciIterator(MAX);
        return StreamSupport.stream(iterable.spliterator(), false).mapToInt(Integer::intValue).peek(
                System.out::println
        ).filter(Problem02::isEven).sum();
    }

    private static boolean isEven(int i) {
        return 0 == i % 2;
    }

    private static class MaxFibonacciIterator implements Iterator<Integer> {
        private final int MAX;

        private int index = 0;

        public MaxFibonacciIterator(int MAX) {
            this.MAX = MAX;
        }

        @Override
        public boolean hasNext() {
            return fibonacci(index + 1) < MAX;
        }

        @Override
        public Integer next() {
            index++;
            return fibonacci(index);
        }
    }

    private static int fibonacci(int i) {
        if (0 == i) {
            return 1;
        }

        if (1 == i) {
            return 2;
        }

        return fibonacci(i - 1) + fibonacci(i - 2);
    }

}
